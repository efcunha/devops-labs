const { URL } = require('url');
const synthetics = require('Synthetics');
const log = require('SyntheticsLogger');
const syntheticsConfiguration = synthetics.getConfiguration();
const syntheticsLogHelper = require('SyntheticsLogHelper');
 
const loadBlueprint = async function () {
 
    const urls = ['https://devops01.edson-devops.eti.br']; // mude isso!
    
    // Define a opção de captura de tela
    const takeScreenshot = true;
 
    /* Desabilitando capturas de tela de etapas padrão tiradas durante chamadas Synthetics.executeStep()
      * A etapa será usada para publicar as métricas no tempo necessário para carregar o conteúdo dom, mas
      * As capturas de tela serão tiradas fora do executeStep para permitir que a página carregue completamente com domcontentloaded
      * Você pode alterá-lo para carregar, networkidle0, networkidle2 dependendo do que funciona melhor para você.
    */
    syntheticsConfiguration.disableStepScreenshots();
    syntheticsConfiguration.setConfig({
       continueOnStepFailure: true,
       includeRequestHeaders: true, // Enable if headers should be displayed in HAR
       includeResponseHeaders: true, // Enable if headers should be displayed in HAR
       restrictedHeaders: [], // Value of these headers will be redacted from logs and reports
       restrictedUrlParameters: [] // Values of these url parameters will be redacted from logs and reports

    });
    
    let page = await synthetics.getPage();
    
    for (const url of urls) {
        await loadUrl(page, url, takeScreenshot);
    }
};

// Reinicializa a página intermediária
const resetPage = async function(page) {
    try {
        await page.goto('about:blank',{waitUntil: ['load', 'networkidle0'], timeout: 30000} );
    } catch(ex) {
        synthetics.addExecutionError('Não é possível abrir uma página em branco ', ex);
    }
}
 
const loadUrl = async function (page, url, takeScreenshot) {
    let stepName = null;
    let domcontentloaded = false;
 
    try {
        stepName = new URL(url).hostname;
    } catch (error) {
        const errorString = `Erro ao analisar o URL: ${url}.  ${error}`;
        log.error(errorString);
         /* Se não conseguirmos analisar a URL, não emita uma métrica com um stepName com base nela.
            Pode não ser um nome de dimensão de métrica legal do CloudWatch e podemos não ter alarmes
            configuração no URL malformado stepName. Em vez disso, falhe esta etapa que irá
            aparecerá nos logs e falhará no canário geral e no alarme no canário geral
            taxa de sucesso.
         */
        throw error;
    }
    
    await synthetics.executeStep(stepName, async function () {
        const sanitizedUrl = syntheticsLogHelper.getSanitizedUrl(url);
        
         /* Você pode personalizar a condição de espera aqui. Por exemplo, usando 'networkidle2' ou 'networkidle0' para carregar a página completamente.
            networkidle0: a navegação é bem-sucedida quando a página não recebe solicitações de rede por meio segundo. Isso pode nunca acontecer se a página estiver constantemente carregando vários recursos.
            networkidle2: A navegação é bem-sucedida quando a página não tem mais de 2 solicitações de rede por meio segundo.
            domcontentloaded: é acionado assim que o DOM da página é carregado, sem esperar que os recursos terminem de carregar. Pode ser usado e, em seguida, adicionar a página de espera explícita.waitFor(timeInMs)
         */        
        const response = await page.goto(url, { waitUntil: ['domcontentloaded'], timeout: 30000});
        if (response) {
            domcontentloaded = true;
            const status = response.status();
            const statusText = response.statusText();
 
            logResponseString = `Resposta do URL: ${sanitizedUrl}  Status: ${status}  Status Text: ${statusText}`;

            //Se o código de status de resposta não for um código de sucesso 2xx
            if (response.status() < 200 || response.status() > 299) {
                throw `Falha ao carregar o URL: ${sanitizedUrl} ${response.status()} ${response.statusText()}`;
            }
        } else {
            const logNoResponseString = `Nenhuma resposta retornada para o URL: ${sanitizedUrl}`;
            log.error(logNoResponseString);
            throw new Error(logNoResponseString);
        }
    });
    
    // Aguarde 15 segundos para deixar a página carregar completamente antes de fazer a captura de tela.
    if (domcontentloaded && takeScreenshot) {
        await page.waitFor(15000);
        await synthetics.takeScreenshot(stepName, 'loaded');
        await resetPage(page);
    }
};
 
const urls = [];
 
exports.handler = async () => {
    return await loadBlueprint();
};
